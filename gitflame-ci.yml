stages:
  - build
  - test
  - deploy
  - cleanup

# Задача для сборки проекта, запускается только на основных ветках и для мерж-реквестов
build_job:
  stage: build
  script:
    - echo "Building the project..."
  only:
    - main
  # rules:
  #   - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop" || $CI_PIPELINE_SOURCE == "merge_request_event"'
  #     when: always  # Всегда запускается для указанных веток или для мерж-реквестов
  

# Задача для тестирования, запускается только при изменении файлов в определенных директориях
test_job:
  stage: test
  script:
    - echo "Running tests..."
  rules:
    - changes:
        - "src/**/*"
        - "tests/**/*"  # Запускается при изменениях в директориях src/ или tests/

# Деплой на продакшн, только когда все тесты пройдены и установлен тег
deploy_prod:
  stage: deploy
  script:
    - echo "Deploying to production..."
  rules:
    - if: '$CI_COMMIT_TAG && $CI_PIPELINE_SOURCE == "push"'
      when: on_success  # Запуск только если предыдущие задачи успешно выполнены и это пуш с тегом

# Деплой на стейджинг, только когда коммит в ветке develop
deploy_staging:
  stage: deploy
  script:
    - echo "Deploying to staging..."
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always  # Всегда запускается для ветки develop

# Задача для очистки, которая выполняется после успешного деплоя
cleanup_job:
  stage: cleanup
  script:
    - echo "Performing cleanup..."
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
      when: on_success  # Выполняется после успешного деплоя в main

# Специфическая задача, запускаемая по расписанию для выполнения бэкапов
scheduled_backup_job:
  stage: deploy
  script:
    - echo "Running scheduled backup..."
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always  # Запускается по расписанию, не зависит от других задач

# Задача для проверки безопасности, запускается для всех коммитов кроме тегов
security_scan:
  stage: test
  script:
    - echo "Performing security scan..."
  rules:
    - if: '$CI_COMMIT_REF_NAME != $CI_COMMIT_TAG'
      when: always  # Запускается для всех коммитов, кроме тех, что с тегами

# Создание артефактов только для определенных веток
artifact_creation:
  stage: build
  script:
    - mkdir build && cd build
    - echo "Creating artifacts..."
    - echo "Some binaries file" > bin
  artifacts:
    paths:
      - build/
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release"'
      when: always  # Создание артефактов только для веток main и release

# Добавлена возможность указания дефолтного образа для всех джоб пайплайна (docker образ)
# - Если образ не указан, то раннер будет выполнять пайплайн в образе alpine:latest
# image: alpine:3.14

# stages:
#   - build
#   - test

# # Добавлена возможность указывать переменные окружения в yml для всех джоб
# variables:
#   MY_VAR: "Значение моей переменной"
#   ANOTHER_VAR: "Другое значение"
#   TEST_ENV_WEBHOOK: "it works !!! pipeline"

# build-job:
#   # Можно перезаписать дефолтный образ пайплайна на какой-то другой или свой
#   image: alpine:latest
#   stage: build
#   variables:
#     TEST_ENV_WEBHOOK: "it works !!! job"
#   script:
#     - echo "=-=-=-=-=-=-=-=-=-=-=-=-="
#     - echo "TEST_ENV_WEBHOOK $TEST_ENV_WEBHOOK"
#     - echo "=-=-=-=-=-=-=-=-=-=-=-=-="
#     - echo "=-=-=-=-=-=-=-=-=-=-=-=-= Variable MY_VAR $MY_VAR"
#     - echo "Building the app" > build.log
#   artifacts:
#     paths:
#       - build.log

# test-job:
#   # Если Image не указан в джобе, то ему присваивается образ дефолтный, который указан в yml
#   stage: test
#   script:
#     - echo "Contents of build.log from build-job:"
#     - cat build.log
#     # Здесь мы используем переменные, указанные выше в yml, из поля variables
#     - echo "Another Variable ANOTHER_VAR $ANOTHER_VAR"
#   # Добавлена возможность проброса артифактов из других джоб, в поле dependencies указываются названия джоб, из которых нужно получить артифакты
#   dependencies:
#     - build-job
